---
title: Tulemused
page: results
---
- problems = read_problems(@items["/problems.csv"])

%header#header
	%center
		%h1= item[:title]

%section.white-section.text-section
	%center= @items["/tulemused.md"].compiled_content(snapshot: :text)

%section#wordclouds.grey-section
	%center
		%h2.subheading Hirmud ja lootused
		%p.paragraph
			Mõeldes prognoosidele, mille järgi tänaste trendide jätkudes langeb
			rahvastiku arv juba selle sajandi lõpuks alla 800 000 inimese,
			jagasid #kuidasmekestame aruteludel osalejad järgmiseid lootusi ja
			hirme.

		%ul.hopes-and-fears
			%li
				%h3.subsubheading Mida me kardame?
				%img.fears(src="/assets/hirmud.png" alt="Hirmude sõnapilv")

			%li
				%h3.subsubheading Mida me loodame?
				%img.hopes(src="/assets/lootused.png" alt="Lootuste sõnapilv")

%section.white-section
	%center
		%h2.subheading Mis teeb enim muret?
		%p.paragraph
			Aruteludel valisid osalejad välja probleemid, mida nad sündimuse, rände ning tööhõive valdkonnas kõige teravamana tunnetavad. Tulba pikkus märgib kordi, mil probleem kolme olulisema sekka hääletati.

		#problems
			%input#population-problem-group(type="radio" name="problem-group" checked)
			%input#migration-problem-group(type="radio" name="problem-group")
			%input#work-problem-group(type="radio" name="problem-group")

			%menu
				%a#population-problem-group-button
					%label(for="population-problem-group") Sündimus
				%a#migration-problem-group-button
					%label(for="migration-problem-group") Ränne
				%a#work-problem-group-button
					%label(for="work-problem-group") Tööhõive

			:ruby
				maxes = Hash[problems.map {|category, problems|
					[category, problems.map {|p| p["rank"] }.max]
				}]

			- %w[population migration work].each do |category|
				- probs = problems[category]
				- max = maxes[category]

				%ol.problems-of(id="#{category}-problems")
					- probs.sort_by {|p| p["rank"] }.reverse.each do |problem|
						%li
							%p= problem["title"]
							%span.score
								- percentage = 100 * problem["rank"] / max
								%span.bar(style="width: #{percentage}%")= problem["rank"]

%section.grey-section
	%center
		%h2.subheading Lahendusideed probleemide kaupa
		%p.paragraph
			Arutelude vormis korraldatud ideekorje aitas kaardistada ligi sada lahendusteed, ettepanekuid lisandus ka veebipõhise ideekorje kaudu. Väljapakutud lahenduskäike saab uurida lahendatavate probleemide kaupa, number probleemi ees viitab lahenduste arvule. Iga tulba lõpus on ekspertide tagasiside, mis aitas hiljem lahendusideed mõjusamateks ettepanekuteks sõnastada.

		= render "/_problems_with_solutions.haml", problems: problems

%section.white-section
	%center
		- solutions_by_category = read_solutions(@items["/solutions.csv"])
		= render "/_solutions.haml", solutions_by_category: solutions_by_category

%section.grey-section.text-section
	%center
		%h2.subheading Edasised sammud
		:markdown
			Projektimeeskond andis ettepanekud kirjalike kokkuvõtetena ministeeriumitele, riigikantseleile ning piirkondlikele arendustöötajatele üle järgmiselt:

			- [Ettepanekud Haridus- ja Teadusministeeriumile](/Ettepanekud_Haridus- ja Teadusministeerium.pdf)
			- [Ettepanekud Kultuuriministeeriumile](/Ettepanekud_Kultuuriministeerium.pdf)
			- [Ettepanekud Majandus- ja Kommunikatsiooniministeeriumile](/Ettepanekud_Majandus- ja Kommunikatsiooniministeerium.pdf)
			- [Ettepanekud Rahandusministeeriumile](/Ettepanekud_Rahandusministeerium.pdf)
			- [Ettepanekud Riigikantseleile (Eesti 2035)](/Ettepanekud_Riigikantselei.pdf)
			- [Ettepanekud Sotsiaalministeeriumile](/Ettepanekud_Sotsiaalministeerium.pdf)
			- [Ettepanekud kohalikele ja piirkondlikele arendustöötajatele](/Ettepanekud_Kohalikud omavalitsused.pdf)

			Kui kõik ideed ei ole tänaseks toetust leidnud, jätkub loodetavasti arutelu väljapakutud lahenduste üle paljude valdkondade tulevikustrateegiaid läbi rääkides. Ettepanekud puudutavad enam kui kümmet valdkonda,  kõige enam tööpoliitikat, regionaalpoliitikat, hariduspoliitikat ning laste- ja perepoliitikat. 

		- solutions = solutions_by_category.values.map(&:values).flatten
		- links = solutions.map(&:links).flatten(1).reject(&:nil?)
		- links_by_name = links.group_by {|name, url| name }
		- sorted_links = links_by_name.sort_by {|name, links| -links.size }

		%ol#next-solution-steps
			- sorted_links[0..4].each do |name, links|
				%li
					- ratio = links.size.to_f / sorted_links[0][1].size.to_f
					- size = 3 + 3 * ratio
					- style = "width: #{size}rem; line-height: #{size}rem"
					%span.link-count
						%i{:style => style}= links.size
					= " #{name}"
